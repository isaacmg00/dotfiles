(defwindow bar
    :monitor 0
    :wm-ignore true
    :stacking "bg"
    :windowtype "dock"
    :focusable false
        
    :geometry (geometry :x "0%"
                        :y "0px"
                        :width "100%"
                        :height "30px"
                        :anchor "top center")
  (main-bar))
;;(include "./sidebar.yuck")
;; Main-bar body    
(defwidget main-bar []
  (centerbox :orientation "horizontal"
    :class "main-bar"
    :space-evenly "true"
    (left-side)
    (workspaces)
    (right-side)))

(defwidget mem []
  (eventbox :onhover "eww update mem_toggle=true"
            :onhoverlost "eww update mem_toggle=false"
      (box :class "volume"
           :spacing 3
           :space-evenly "false"
        ;:halign "center"
        (button :onclick "pamixer -t"
              (label :text "mem"
                     :class "network-ssid"
                     ))

        (revealer :duration "250ms"
                  :reveal "${mem_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
    (metric 
    :label ""

    :class "network-ssid"
               :spacing 3

            :value {EWW_RAM.used_mem_perc}
            :onchange "")))))

(defwidget cpu []
  (eventbox :onhover "eww update cpu_toggle=true"
            :onhoverlost "eww update cpu_toggle=false"
      (box :class "volume"
           :spacing 3
           :space-evenly "false"
        ;:halign "center"
        (button :onclick "pamixer -t"
              (label :text "cpu"
                     :class "network-ssid"
                     ))

        (revealer :duration "250ms"
                  :reveal "${cpu_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
    (metric :label ""
    
    :class "network-ssid"
            :value {EWW_CPU.avg}
            :onchange "")))))

(defwidget cpu2 []
  (eventbox :onhover "eww update cpu_toggle=true"
            :onhoverlost "eww update cpu_toggle=false"
      (box :class "volume"
           :spacing 3
           :space-evenly "false"
        ;:halign "center"
        (button :onclick "pamixer -t"
              (label :text "cpu"
                     :class "network-ssid"
                     ))

        (revealer :duration "250ms"
                  :reveal "${cpu_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
    (metric :label ""
    
    :class "network-ssid"
            :value {EWW_CPU.avg}
            :onchange "")))))

;; Widgets
(defwidget mpd []

   (box :class "mpd"
        :halign "start"
        :valign "center"
                       :spacing 10
    (metric 
    :label "mem"

    :class "network-ssid"
               :spacing 3

            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "cpu"
    
    :class "network-ssid"
            :value {EWW_CPU.avg}
            :onchange "")))

(defwidget workspaces []
  (box :class "workspaces"
       :halign "center"
       :valign "center"
       :orientation "horizontal"
       :spacing 22
       :space-evenly "false"
   (button ;:class "${ws1} ?1"
           :onclick "swaymsg workspace number 1"
    "")
   (button ;:class "${ws2} ?2"
           :onclick "swaymsg workspace number 2"
    "")
   (button ;:class "${ws3} ?3"
           :onclick "swaymsg workspace number 3"
    "")
   (button ;:class "${ws4} ?4"
     :onclick "swaymsg workspace number 4"
    "")
   (button ;:class "${ws5} ?5"
     :onclick "swaymsg workspace number 5"
    "")
   (button ;:class "${ws6} ?6"
     :onclick "swaymsg workspace number 6"
    "")))

(defwidget right-side []
  (box :class "left-side"
      :halign "end"
      :valign "center"
      :spacing 0
      :space-evenly "false"
    (volume)
    (light)
    (network)
    (bluetooth)
    (battery)
    (powermenu)
    ))

(defwidget left-side []
  (box 
      :class "right-side"
      :valign "center"
      :spacing 0
      :space-evenly "false"
    (volume2)
    (mem)
    (cpu)

    ))

;(defwidget volume []
 ;     (box  :class "volume"
  ;      :spacing 0
   ;     :space-evenly "false"
    ;    (button :onrightclick "pamixer -t"
     ;           :onmiddleclick "pavucontrol &"
      ;  (label :text "${vol-icon}"
       ;     :class "vol-icon"))
        ;  (scale :value "${volume}"
         ;   :min 2
          ;  :max 101
           ; :class "volume-bar"
            ;:onchange "pamixer --set-volume {}"
            ;:valign "center"
            ;:halign "center"
            ;:tooltip "${volume}")))

(defwidget volume []
  (eventbox :onhover "eww update vol_toggle=true"
            :onhoverlost "eww update vol_toggle=false"
      (box :class "volume"
           :spacing 3
           :space-evenly "false"
        ;:halign "center"
        (button :onclick "pamixer -t"
              (label :text "${vol-icon}"
                     :class "network-ssid"))

        (revealer :duration "250ms"
                  :reveal "${vol_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
          (scale :value "${volume}"
            :min 2
            :draw-value: "true"
            :orientation "h"
            :max 101
            :class "volume-bar"
            :onchange "pamixer --set-volume {}"
            :onrightclick "pamixer -t"
            ;:valign "center"
            ;:halign "center"
            :tooltip "${volume}")))))

(defwidget volume2 []
  (eventbox :onhover "eww update sidebar_toggle=true"
            :onhoverlost "eww update sidebar_toggle=false"
            :class "expander"
      (box :class "volume"
           :spacing 3
           :space-evenly "false"
           :orientation "h"
        ;:halign "center"
        (button 
              (label :text ""
                     :class "bluetooth-icon"))

        (revealer :duration "550ms"
                  :reveal "${sidebar_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
                  
  (box :orientation "h" :space-evenly true :class "appbar" :spacing "10" :halign "center" :valign "center" :class "box"
    (button :onclick "spotify&" 
      (label :text ""
             :class "spotify"))
    (button :onclick "firefox&" (label :text "" :class "firefox"))
    (button :onclick "code&" (label :text "﬏" :class "code"))
    (button :onclick "systemsettings5&" (label :text "" :class "thunar"))))
)))

(defwidget powermenu []
  (eventbox :onhover "eww update powermenu_toggle=true"
            :onhoverlost "eww update powermenu_toggle=false"
          
      (box
           :spacing 3
           :space-evenly "false"
           :orientation "h"
        ;:halign "center"
        (button
              (label :text ""
                     :class "powermenu-icon"))

        (revealer :duration "550ms"
                  :reveal "${powermenu_toggle}"
                  :transition "slideleft"
                  :onleftclick "pamixer -t"
                  
  (box :orientation "h" :space-evenly true :spacing "0" :halign "center" :valign "center" :class "box" :width 20
  (label :text "SEE YOU SPACE COWBOY..." :class "space-cowboy")
    (button :onclick "spotify&" 
      (label :text ""
      :class "shutdown"
             ))
    (button :onclick "firefox&" (label :text "" :class "firefox"))
    (button :onclick "code&" (label :text "" :class "log off"))
    (button :onclick "systemsettings5&" (label :text "" :class "thunar"))))
)))

;;;; AppBar widget
(defwidget appbar []
  (box :orientation "h" :space-evenly true :class "appbar" :spacing "5" :halign "center" :valign "center"
    (button :style "color: #5e81ac;" :onclick "krita&" (label :text ""))
    (button :style "color: #81a1c1;" :onclick "firefox&" (image :path "images/firefox.svg" :width 32 :height 32))
    (button :style "color: #b48ead;" :onclick "vscodium&" (image :path "images/vscode.svg" :width 32 :height 32))
    (button :style "color: #bf616a;" :onclick "gimp&" (image :path "images/gimp.svg" :width 32 :height 32))))

(defwidget light []
  (eventbox :onhover "eww update light_toggle=true"
            :onhoverlost "eww update light_toggle=false"
            :onscroll "brightnessctl set 1%- {down}"
            :onscroll "brightnessctl set +1% {up}"
            :tooltip "test"



        (box :class "light"
             :spacing 0
             :space-evenly "false"
            ""

            
      (revealer :duration "250ms"
                :transition "slideleft"
                :reveal "${light_toggle}"
                :tooltip "test"

      (button
        :tooltip "test"

      :onscroll "brightnessctl set 5%- {up}" 
        (label  :text "${light}%"
                :class "network-ssid"
                :onclick "brightnessctl set 5%-"
                :tooltip "test"

                                ))))))


(defwidget network []
  (eventbox :onhover "eww update network_toggle=true"
            :onhoverlost "eww update network_toggle=false"
      (box :class "network"
           :spacing 3
           :space-evenly "false"
        :halign "center"
        (button :onrightclick "nm-connection-editor &"
              (label :text ""
                     :class "network-icon"))
        (revealer :duration "250ms"
                  :reveal "${network_toggle}"
                  :transition "slideleft"
             (label :text "${network}"
                    :class "network-ssid")))))


(defwidget bluetooth []
  (eventbox :onhover "eww update bluetooth_toggle=true"
            :onhoverlost "eww update bluetooth_toggle=false"
      (box :class "bluetooth"
           :spacing 3
           :space-evenly "false"
        :halign "center"
        (button :onrightclick "nm-connection-editor &"
              (label :text ""
                     :class "bluetooth-icon"))
        (revealer :duration "250ms"
                  :reveal "${bluetooth_toggle}"
                  :transition "slideleft"
             (label :text "${bluetooth}"
                    :class "network-ssid")))))         

(defwidget battery []
  (eventbox :onhover "eww update battery_toggle=true"
            :onhoverlost "eww update battery_toggle=false"
            :class "hover"
      (box :class "bluetooth"
           :spacing 3
           :space-evenly "false"
        :halign "center"
        (button :onrightclick "nm-connection-editor &"
              (label :text ""
                     :class "battery-icon"))
        (revealer :duration "250ms"
                  :reveal "${battery_toggle}"
                  :transition "slideleft"
             (label :text "${battery}"
                    :class "network-ssid")))))            

(defwidget gammastep []
  (eventbox :onhover "eww update gamma_toggle=true"
            :onhoverlost "eww update gamma_toggle=false"
      (box :class "gammastep"
           :spacing 10
           :space-evenly "false"
       ""
        (revealer :duration "200ms"
                 ; :reveal "${gamma_toggle}"
                  :transition "slideleft"
;            (button :onclick "${gamma-toggle}"
 ;              (label :text "${gamma-temp}"))))))
 ))))

(defwidget sidebar []
  (eventbox :onhover "eww open sidebar"
            :cursor "pointer"
      (button :onclick "~/.config/rofi/powermenu/powermenu.sh"
        (label :text ""
        :class "sidebar-icon"))))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "network-ssid"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))



;; Variables

(defvar media_toggle false)

(defvar network_toggle false)

(defvar bluetooth_toggle false)

(defvar battery_toggle false)

(defvar light_toggle false)

(defvar vol_toggle false)

(defvar sidebar_toggle false)

(defvar mem_toggle false)

(defvar cpu_toggle false)

(defvar powermenu_toggle false)


(defvar gamma-toggle
  "source $HOME/.config/eww/scripts/env.sh && $HOME/.config/eww/scripts/gammastep.sh toggle")

;(defpoll ws1 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w1.sh")
;
;(defpoll ws2 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w2.sh")
;
;(defpoll ws3 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w3.sh")
;
;(defpoll ws4 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w4.sh")
;
;(defpoll ws5 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w5.sh")
;
;(defpoll ws6 :interval "100ms"
; "$HOME/.config/eww/scripts/sway/w6.sh")


;; Polling variables

(defpoll mpd :interval "2s"
  "$HOME/.config/eww/scripts/mpd.sh")

(defpoll vol-icon :interval "300ms"
  "$HOME/.config/eww/scripts/volume.sh")

(defpoll volume :interval "50ms"
  "pamixer --get-volume")

(defpoll light :interval "500ms"
  "echo $(brightnessctl -m -d amdgpu_bl1 | awk -F, '{print substr($4, 0, length($4)-1)}')")

(defpoll battery :interval "5s"
  "$HOME/.config/eww/scripts/battery.sh")

(defpoll network :interval "15s"
  "$HOME/.config/eww/scripts/network.sh")

(defpoll bluetooth :interval "15s"
  "$HOME/.config/eww/scripts/bluetooth.sh")

(defpoll date :interval "30s"
    "date +%H:%M")

(defpoll date_alt :interval "9h"
  "date +'%b %e'")

;(defpoll gamma-temp :interval "1s"
;  "source $HOME/.config/eww/scripts/env.sh && $HOME/.config/eww/scripts/gammastep.sh temperature")





